import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';

import UserModel from '../models/User.js';

 export const login = async (req, res) => {
    try{
        const user = await UserModel.findOne({ email: req.body.email });

        if(!user) {
            return res.status(404).json({
                message: 'Пользователь не найден'
            });
        }

        const isValidPass = await bcrypt.compare(req.body.password, user._doc.passwordHash);

        if(!isValidPass) {
            return res.status(400).json({
                message: 'Неверный логин или пароль'
            });
        }

        const token = jwt.sign(
            {
                _id: user.id
            }, 
            'secret123',
            {
                expiresIn: '30d'
            }
        );
    
        const { passwordHash, ...userData } = user._doc;
    
        res.json({
            ...userData,
            token
        });
    } catch(err) {
        console.log(err)
        res.status(500).json({
            message: 'Не удалось авторизоваться'
        });
    }
};

export const getMe = async (req, res) => {
    try{
        const user = await UserModel.findById(req.userId);
        if (!user) {
            return res.status(404).json({
                message: 'Пользователь не найден'
            });
        }

        const { passwordHash, ...userData } = user._doc;

        res.json(userData);       
    } catch(err) {
        console.log(err);
        res.status(500).json({
            message: 'Нет доступа'
        });
    }
};